import unittest
import importlib

class TestFinal(unittest.TestCase):
    def test_01(self):
        self.assertEqual(asgmt.factorial(0), 1)
        self.assertEqual(asgmt.factorial(1), 1)
        self.assertEqual(asgmt.factorial(2), 2)
        self.assertEqual(asgmt.factorial(3), 6)
        self.assertEqual(asgmt.factorial(4), 24)
        self.assertEqual(asgmt.factorial(5), 120)
        self.assertEqual(asgmt.factorial(6), 720)
    def test_02(self):
        self.assertEqual(asgmt.get_optimal_change(35, 50), {500: 0, 100: 0, 50: 0, 10: 1, 5: 1, 1: 0})
        self.assertEqual(asgmt.get_optimal_change(69, 100), {500: 0, 100: 0, 50: 0, 10: 3, 5: 0, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(124, 150), {500: 0, 100: 0, 50: 0, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(124, 200), {500: 0, 100: 0, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(124, 500), {500: 0, 100: 3, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(124, 1000), {500: 1, 100: 3, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(1124, 1500), {500: 0, 100: 3, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(1124, 2000), {500: 1, 100: 3, 50: 1, 10: 2, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(95, 100), {500: 0, 100: 0, 50: 0, 10: 0, 5: 1, 1: 0})
        self.assertEqual(asgmt.get_optimal_change(84, 100), {500: 0, 100: 0, 50: 0, 10: 1, 5: 1, 1: 1})
        self.assertEqual(asgmt.get_optimal_change(43, 50), {500: 0, 100: 0, 50: 0, 10: 0, 5: 1, 1: 2})
    def test_03(self):
        prime = asgmt.Prime(5)
        self.assertEqual(prime.get_nth_int(1), 2)
        self.assertEqual(prime.get_nth_int(2), 3)
        self.assertEqual(prime.get_nth_int(3), 5)
        self.assertEqual(prime.get_nth_int(4), 7)
        self.assertEqual(prime.get_nth_int(5), 11)
        self.assertEqual(prime.get_sequence(), [2, 3, 5, 7, 11])
        prime = asgmt.Prime(7)
        self.assertEqual(prime.get_nth_int(1), 2)
        self.assertEqual(prime.get_nth_int(2), 3)
        self.assertEqual(prime.get_nth_int(3), 5)
        self.assertEqual(prime.get_nth_int(4), 7)
        self.assertEqual(prime.get_nth_int(5), 11)
        self.assertEqual(prime.get_nth_int(6), 13)
        self.assertEqual(prime.get_nth_int(7), 17)
        self.assertEqual(prime.get_sequence(), [2, 3, 5, 7, 11, 13, 17])
    def test_04(self):
        rot13 = asgmt.Rot13()
        self.assertEqual(rot13.rotate_character("A"), 'N')
        self.assertEqual(rot13.rotate_character("B"), 'O')
        self.assertEqual(rot13.rotate_character("C"), 'P')
        self.assertEqual(rot13.rotate_character("K"), 'X')
        self.assertEqual(rot13.rotate_character("L"), 'Y')
        self.assertEqual(rot13.rotate_character("M"), 'Z')
        self.assertEqual(rot13.rotate_character("a"), 'n')
        self.assertEqual(rot13.rotate_character("b"), 'o')
        self.assertEqual(rot13.rotate_character("c"), 'p')
        self.assertEqual(rot13.rotate_character("k"), 'x')
        self.assertEqual(rot13.rotate_character("l"), 'y')
        self.assertEqual(rot13.rotate_character("m"), 'z')
        self.assertEqual(rot13.rotate_sentence("Abj vf orggre guna arire."), 'Now is better than never.')
        self.assertEqual(rot13.rotate_sentence("Now is better than never."), 'Abj vf orggre guna arire.')
        self.assertEqual(rot13.rotate_sentence("Rkcyvpvg vf orggre guna vzcyvpvg."), 'Explicit is better than implicit.')
        self.assertEqual(rot13.rotate_sentence("Explicit is better than implicit."), 'Rkcyvpvg vf orggre guna vzcyvpvg.')
        self.assertEqual(rot13.rotate_sentence("ABCKLM"), 'NOPXYZ')
        self.assertEqual(rot13.rotate_sentence("abcklm"), 'nopxyz')
    def test_05(self):
        mlb_teams = asgmt.import_mlb_teams_json()
        self.assertIsInstance(mlb_teams, list)
        self.assertEqual(len(mlb_teams), 30)
    def test_06(self):
        self.assertEqual(asgmt.find_teams_ballpark("Boston Red Sox"), 'Fenway Park')
        self.assertEqual(asgmt.find_teams_ballpark("New York Yankees"), 'Yankee Stadium')
        self.assertEqual(asgmt.find_teams_ballpark("Los Angeles Dodgers"), 'Dodger Stadium')
        self.assertEqual(asgmt.find_teams_ballpark("Los Angeles Angels"), 'Angel Stadium')
        self.assertEqual(asgmt.find_teams_ballpark("Baltimore Orioles"), 'Oriole Park')
    def test_07(self):
        self.assertEqual(asgmt.find_ballpark_full_address("Boston Red Sox"), '4 Jersey Street, Boston, MA, United States')
        self.assertEqual(asgmt.find_ballpark_full_address("New York Yankees"), 'One East 161st Street, Bronx, NY, United States')
        self.assertEqual(asgmt.find_ballpark_full_address("Los Angeles Dodgers"), '1000 Vin Scully Avenue, Los Angeles, CA, United States')
        self.assertEqual(asgmt.find_ballpark_full_address("Los Angeles Angels"), '2000 Gene Autry Way, Anaheim, CA, United States')
        self.assertEqual(asgmt.find_ballpark_full_address("Baltimore Orioles"), '333 West Camden Street, Baltimore, MD, United States')
    def test_08(self):
        out = asgmt.import_movies_release_info()
        self.assertIsInstance(out, tuple)
        self.assertEqual(len(out), 2)
    def test_09(self):
        the_shawshank_redemption_release_info = asgmt.find_the_shawshank_redemption_release_info()
        self.assertEqual(the_shawshank_redemption_release_info.shape, (68, 3))
        titles = the_shawshank_redemption_release_info.iloc[:, 0].to_list()
        self.assertIn("The Shawshank Redemption", titles)
        countries = the_shawshank_redemption_release_info.iloc[:, 1].to_list()
        self.assertIn("Taiwan", countries)
        self.assertIn("United States", countries)
    def test_10(self):
        self.assertEqual(asgmt.find_the_shawshank_redemption_release_info_in_taiwan("1st"), "1995-03-10")
        self.assertEqual(asgmt.find_the_shawshank_redemption_release_info_in_taiwan("2nd"), "2020-03-13")

asgmt = importlib.import_module("final")
suite = unittest.TestLoader().loadTestsFromTestCase(TestFinal)
runner = unittest.TextTestRunner(verbosity=2)
test_results = runner.run(suite)
number_of_failures = len(test_results.failures)
number_of_errors = len(test_results.errors)
number_of_test_runs = test_results.testsRun
number_of_successes = number_of_test_runs - (number_of_failures + number_of_errors)
print("You've got {} successes among {} questions.".format(number_of_successes, number_of_test_runs))